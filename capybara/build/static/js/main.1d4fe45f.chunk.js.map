{"version":3,"sources":["app/components/Capybara/CapybaraTile/CapybaraLink/CapybaraLink.tsx","app/components/Capybara/CapybaraTile/CapybaraTile.tsx","app/components/Capybara/helpers.ts","app/store/states/appState/slices/layout/layout.ts","app/store/states/appState/slices/layout/helpers.ts","layout-mock.ts","app/store/states/ui/slices/overlay/overlay.ts","app/components/Capybara/Capybara.tsx","app/components/Capybara/hooks.ts","app/components/Overlay/OverlayContent/EditTileForm/EditLinkForm/EditLinkForm.tsx","app/components/Overlay/OverlayContent/EditTileForm/helpers.tsx","app/components/Overlay/OverlayContent/EditTileForm/EditTileForm.tsx","app/components/Overlay/OverlayContent/SettingsForm/SettingsForm.js","app/components/Overlay/OverlayContent/OverlayContent.tsx","app/components/Overlay/Overlay.tsx","App.tsx","app/store/states/ui/slices/styles/styles.ts","app/store/states/ui/uiReducer.ts","app/store/states/domainData/slices/auth/auth.ts","app/store/states/domainData/domainDataReducer.ts","app/store/states/appState/appStateReducer.ts","app/store/states/rootReducer.ts","app/store/store.ts","serviceWorker.ts","index.tsx"],"names":["CapybaraLink","children","to","styles","dimensions","width","height","hostname","rowHeight","URL","style","padding","className","href","onDragStart","evt","preventDefault","onContextMenu","src","alt","display","CapybaraTile","type","content","url","title","Error","target","removeEventListener","mouseMoveListener","addEventListener","initialState","window","localStorage","layoutJSONString","getItem","JSON","parse","err","getLayoutFromLocalStorage","data","grid","i","x","y","w","h","backgroundColor","color","LayoutStateSlice","createSlice","name","reducers","setLayout","state","action","payload","setLayoutItemData","layoutItem","id","find","item","findLayoutItemById","actions","overlaySlice","isActive","setOverlay","unsetOverlay","Capybara","isOverlayed","dispatch","useDispatch","containerRef","useRef","dispatchUpdatedLayoutState","RGLLayoutData","newLayout","layout","map","index","newItem","cloneDeep","useSelector","appState","ref","getDimensions","current","offsetWidth","offsetHeight","useState","setDimensions","useEffect","handleResize","useContainerDimensions","margin","gridConfig","containerPadding","cols","verticalCompact","isDraggable","isResizable","isBounded","useCSSTransforms","preventCollision","onResize","oldItem","placeholder","element","onResizeStart","parentElement","zIndex","onResizeStop","onDragStop","setTimeout","filter","transition","undefined","data-grid","foo","onClick","console","log","divider","EditLinkForm","inputsData","onInputChange","htmlFor","value","onChange","getTileFormLayout","onContentInputChange","EditTileForm","tileDataState","el","setInputsData","onStylesInputChange","prevState","newState","onSubmit","stopPropagation","boxShadow","SettingsForm","OverlayContent","Overlay","CSSTransition","in","timeout","classNames","enterActive","enterDone","exit","unmountOnExit","role","App","ui","overlay","stylesSlice","rounding","setRounding","combineReducers","username","authStateSlice","unauthorise","authorise","domainDataReducer","authorisation","appStateReducer","reducer","domainData","uiReducer","store","configureStore","lastLayout","getState","subscribe","setItem","stringify","Boolean","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d4fe45f.chunk.js","sourcesContent":["import React from 'react';\nimport './CapybaraLink.scss';\nimport { CapybaraLinkProps } from './types';\n\nconst CapybaraLink: React.FC<CapybaraLinkProps> = ({\n  children,\n  to,\n  styles,\n  dimensions: { width, height, rowHeight },\n}) => {\n  let hostname = '';\n  try {\n    hostname = new URL(to).hostname;\n  } catch {}\n\n  return (\n    <a\n      style={{\n        ...styles,\n        padding: width === 1 && height === 1 ? '0.4em' : '',\n      }}\n      className=\"capytile--link\"\n      href={to}\n      onDragStart={(evt) => evt.preventDefault()}\n      onContextMenu={(evt) => {\n        evt.preventDefault();\n      }}\n    >\n      <img\n        className=\"capytile--link__icon\"\n        src={\n          hostname\n            ? `https://api.faviconkit.com/${hostname}/144`\n            : 'https://www.iconsdb.com/icons/preview/red/error-xxl.png'\n        }\n        alt=\"favicon\"\n        style={{ width: width === 1 ? '100%' : '' }}\n      />\n      <div className=\"capytile--link__title\" style={{ display: width === 1 && height === 1 ? 'none' : 'block' }}>\n        {children}\n      </div>\n    </a>\n  );\n};\n\nexport default CapybaraLink;\n","import React from 'react';\nimport CapybaraLink from './CapybaraLink/CapybaraLink';\nimport { CapybaraTileProps } from './types';\n\nconst CapybaraTile: React.FC<CapybaraTileProps> = ({ type, content, styles, dimensions }) => {\n  switch (type) {\n    case 'link':\n      return (\n        <CapybaraLink styles={styles} to={content.url} dimensions={dimensions}>\n          {content.title}\n        </CapybaraLink>\n      );\n    default:\n      throw new Error('Invalid capybara tile type recieved while mapping types to Components');\n  }\n};\n\nexport default CapybaraTile;\n","export const preventDefault = (evt: Event): void => {\n  evt.preventDefault();\n  evt.target?.removeEventListener('click', preventDefault);\n};\n\nexport const mouseMoveListener = (evt: Event): void => {\n  evt.target?.addEventListener('click', preventDefault);\n  evt.target?.removeEventListener('mousemove', mouseMoveListener);\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LayoutItem } from '../layout/types';\nimport { getLayoutFromLocalStorage, findLayoutItemById } from './helpers';\nimport { EditTileInputsData } from '../../../../../components/Overlay/OverlayContent/EditTileForm/types';\nimport mock from '../../../../../../layout-mock';\n\nconst initialState: LayoutItem[] = getLayoutFromLocalStorage() || mock;\n\nexport const LayoutStateSlice = createSlice({\n  name: 'layout',\n  initialState,\n  reducers: {\n    setLayout: (state, action: PayloadAction<LayoutItem[]>) => action.payload,\n    setLayoutItemData: (state, action: PayloadAction<EditTileInputsData>) => {\n      const { id } = action.payload;\n      const layoutItem = findLayoutItemById(state, id);\n\n      layoutItem.data.content = action.payload.content;\n      layoutItem.data.styles = action.payload.styles;\n    },\n  },\n});\n\nexport const { setLayout, setLayoutItemData } = LayoutStateSlice.actions;\n\nexport default LayoutStateSlice.reducer;\n","import { LayoutItem } from '../layout/types';\n\nconst getLayoutFromLocalStorage = (): LayoutItem[] | null => {\n  let layout: LayoutItem[];\n  if (window.localStorage) {\n    const layoutJSONString = window.localStorage.getItem('layout');\n    if (layoutJSONString) {\n      try {\n        layout = JSON.parse(layoutJSONString);\n        return layout;\n      } catch (err) {\n        throw new Error('Error occured while parsing local storage layout data');\n      }\n    }\n  }\n  return null;\n};\n\nconst findLayoutItemById = (state: LayoutItem[], id: string) => {\n  const layoutItem = state.find((item) => item.data.grid.i === id);\n  if (!layoutItem) {\n    throw new Error(\"Error occured while setting tile's layout data to Redux state\");\n  }\n  return layoutItem;\n};\n\nexport { getLayoutFromLocalStorage, findLayoutItemById };\n","export default [\n  {\n    type: 'link',\n    data: {\n      grid: {\n        i: 'x',\n        x: 0,\n        y: 0,\n        w: 2,\n        h: 2,\n      },\n      content: {\n        title:\n          'Lorem ipsum dolor sit amet consectetur adipisicing elit. Fuga voluptatibus minus incidunt aliquam non ex at!',\n        url: 'https://github.com',\n      },\n      styles: {\n        backgroundColor: '#ffffff',\n        color: '#000000',\n      },\n    },\n  },\n  {\n    type: 'link',\n    data: {\n      grid: {\n        i: 'y',\n        x: 2,\n        y: 0,\n        w: 2,\n        h: 2,\n      },\n      content: {\n        title: 'Distinctio sapiente officia, laudantium, impedit accusamus obcaecati eius ipsum dolorum.',\n        url: 'https://yandex.ru',\n      },\n      styles: {\n        backgroundColor: '#ffffff',\n        color: '#000000',\n      },\n    },\n  },\n  {\n    type: 'link',\n    data: {\n      grid: {\n        i: 'z',\n        x: 4,\n        y: 0,\n        w: 2,\n        h: 2,\n      },\n      content: {\n        title: 'Maxime repellendus eveniet aliquam eius quia, neque aliquid provident quisquam ea laboriosam velit.',\n        url: 'https://google.com',\n      },\n      styles: {\n        backgroundColor: '#ffffff',\n        color: '#000000',\n      },\n    },\n  },\n];\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Overlay } from './types';\n\nconst initialState: Overlay = {\n  isActive: false,\n  type: null,\n  data: null,\n};\n\nexport const overlaySlice = createSlice({\n  name: 'overlay',\n  initialState,\n  reducers: {\n    setOverlay: (state, action: PayloadAction<Overlay>) => action.payload,\n    unsetOverlay: (state) => {\n      state.isActive = false;\n    },\n  },\n});\n\nexport const { setOverlay, unsetOverlay } = overlaySlice.actions;\n\nexport default overlaySlice.reducer;\n","import React, { useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { cloneDeep } from 'lodash';\nimport GridLayout, { ReactGridLayoutProps, ItemCallback } from 'react-grid-layout';\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu';\n\nimport CapybaraTile from './CapybaraTile/CapybaraTile';\nimport { mouseMoveListener, preventDefault } from './helpers';\nimport { useContainerDimensions } from './hooks';\nimport { setLayout } from '../../../app/store/states/appState/slices/layout/layout';\nimport { LayoutItem } from '../../store/states/appState/slices/layout/types';\nimport { State } from '../../store/states/types';\n\nimport './Capybara.scss';\nimport { setTimeout } from 'timers';\nimport { setOverlay } from '../../store/states/ui/slices/overlay/overlay';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nconst Capybara: React.FC<{ isOverlayed: boolean }> = ({ isOverlayed }) => {\n  const dispatch = useDispatch();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const dispatchUpdatedLayoutState = (RGLLayoutData: GridLayout.Layout[]) => {\n    const newLayout = layout.map((item, index) => {\n      const newItem = cloneDeep(item);\n      newItem.data.grid = RGLLayoutData[index];\n      return newItem;\n    });\n    dispatch(setLayout(newLayout));\n  };\n\n  // a safe deep copy of the current layout state\n  const layout: LayoutItem[] = cloneDeep(useSelector((state: State) => state.appState.layout));\n\n  const onDragStart: ItemCallback = (layout, oldItem, newItem, placeholder, evt, element) => {\n    evt.target?.addEventListener('mousemove', mouseMoveListener);\n    element.style.zIndex = '100';\n  };\n\n  const onDragStop: ItemCallback = (RGLLayoutData, oldItem, newItem, placeholder, evt, element) => {\n    element.style.zIndex = '0';\n    setTimeout(() => {\n      evt.target?.removeEventListener('click', preventDefault);\n    }, 0);\n\n    dispatchUpdatedLayoutState(RGLLayoutData);\n  };\n\n  const onResizeStart: ItemCallback = (RGLLayoutData, oldItem, newItem, placeholder, evt, element) => {\n    element.parentElement!.style.zIndex = '1000';\n  };\n\n  const onResize: ItemCallback = (RGLLayoutData, oldItem, newItem, placeholder, evt, element) => {\n    dispatchUpdatedLayoutState(RGLLayoutData);\n  };\n\n  const onResizeStop: ItemCallback = (RGLLayoutData, oldItem, newItem, placeholder, evt, element) => {\n    dispatchUpdatedLayoutState(RGLLayoutData);\n    element.parentElement!.style.zIndex = '0';\n  };\n\n  const { width, height } = useContainerDimensions(containerRef);\n  const margin = width / 100;\n  const rowHeight = (width - margin * 21) / 20;\n\n  const gridConfig: Readonly<ReactGridLayoutProps> = {\n    // innerRef: someRef, // this is supposed to replace the deprecated ReasctDOM.findDOMNode(), but isn't working\n    className: 'capybara',\n    containerPadding: [20, 20],\n    cols: 20,\n    width,\n    rowHeight,\n    margin: [margin, margin],\n    verticalCompact: true,\n    isDraggable: true,\n    isResizable: true,\n    isBounded: false,\n    useCSSTransforms: true,\n    preventCollision: false,\n    onResize,\n    onResizeStart,\n    onResizeStop,\n    onDragStart,\n    onDragStop,\n  };\n\n  return (\n    <>\n      <ContextMenuTrigger id=\"same_unique_identifier\">\n        <div\n          className=\"capybara\"\n          id=\"capybara\"\n          ref={containerRef}\n          style={isOverlayed ? { filter: 'blur(1.1px) brightness(70%)', transition: 'all 0.3s ease' } : undefined}\n        >\n          <GridLayout {...gridConfig}>\n            {layout.map(({ type, data }) => (\n              <div\n                className=\"capybara__tile-container\"\n                key={data.grid.i}\n                data-grid={data.grid}\n                // onClick={(evt) => evt.stopPropagation()}       // Is this needed yet?\n                onContextMenu={() => {\n                  dispatch(setOverlay({ isActive: true, type: 'edit', data: { id: data.grid.i, type } }));\n                }}\n              >\n                <CapybaraTile\n                  type={type}\n                  content={data.content}\n                  styles={data.styles}\n                  dimensions={{ rowHeight, width: data.grid.w, height: data.grid.h }}\n                />\n              </div>\n            ))}\n          </GridLayout>\n        </div>\n      </ContextMenuTrigger>\n      <ContextMenu id=\"same_unique_identifier\">\n        <MenuItem\n          data={{ foo: 'bar' }}\n          onClick={() => {\n            dispatch(setOverlay({ isActive: true, type: 'settings', data: null }));\n          }}\n        >\n          Settings\n        </MenuItem>\n        <MenuItem\n          data={{ foo: 'bar' }}\n          onClick={() => {\n            console.log(222);\n          }}\n        >\n          Add new bookmark\n        </MenuItem>\n        <MenuItem divider />\n        <MenuItem\n          data={{ foo: 'bar' }}\n          onClick={() => {\n            console.log(111);\n          }}\n        >\n          Add new folder\n        </MenuItem>\n      </ContextMenu>\n    </>\n  );\n};\n\nexport default Capybara;\n","import { useState, useEffect, RefObject } from 'react';\nimport { Dimensions } from './CapybaraTile/types';\n\nexport const useContainerDimensions = (ref: RefObject<HTMLDivElement>): Dimensions => {\n  const getDimensions = () => {\n    if (ref.current) {\n      return {\n        width: ref.current.offsetWidth,\n        height: ref.current.offsetHeight,\n      };\n    }\n    throw new Error('ref.current in capybara container is currently null');\n  };\n\n  const [dimensions, setDimensions] = useState<Dimensions>({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (ref.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [ref]);\n\n  return dimensions;\n};\n","import React from 'react';\nimport { EditTileFormProps } from '../types';\n\nconst EditLinkForm: React.FC<EditTileFormProps> = ({\n  inputsData: {\n    content: { url, title },\n  },\n  onInputChange,\n}) => {\n  return (\n    <>\n      <div className=\"overlay-form__group\">\n        <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-url\">\n          URL:\n        </label>\n        <input\n          className=\"overlay-form__input overlay-form__input--text\"\n          name=\"url\"\n          type=\"text\"\n          id=\"overlay-edit-url\"\n          value={url || ''}\n          onChange={onInputChange}\n        />\n      </div>\n      <div className=\"overlay-form__group\">\n        <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-title\">\n          Link title:\n        </label>\n        <input\n          className=\"overlay-form__input overlay-form__input--text\"\n          name=\"title\"\n          type=\"text\"\n          id=\"overlay-edit-title\"\n          value={title || ''}\n          onChange={onInputChange}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default EditLinkForm;\n","import React from 'react';\nimport EditLinkForm from './EditLinkForm/EditLinkForm';\nimport { cloneDeep } from 'lodash';\nimport { EditTileInputsData, EditStyleInputName, EditContentInputName, OnContentInputChange } from './types';\n\nconst getTileFormLayout = (\n  type: string,\n  inputsData: EditTileInputsData,\n  onContentInputChange: OnContentInputChange,\n): JSX.Element => {\n  switch (type) {\n    case 'link':\n      return <EditLinkForm inputsData={inputsData} onInputChange={onContentInputChange} />;\n    default:\n      throw new Error('Invalid overlay form type recieved in EditTileForm component');\n  }\n};\n\nexport { getTileFormLayout };\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { cloneDeep } from 'lodash';\n\nimport { State } from '../../../../store/states/types';\nimport { EditData } from '../../../../store/states/ui/slices/overlay/types';\nimport { getTileFormLayout } from './helpers';\nimport { EditTileInputsData, EditStyleInputName, EditContentInputName } from './types';\nimport { setLayoutItemData } from '../../../../store/states/appState/slices/layout/layout';\nimport { unsetOverlay } from '../../../../store/states/ui/slices/overlay/overlay';\nimport './EditTileForm.scss';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nconst EditTileForm: React.FC<EditData> = ({ id, type }) => {\n  const dispatch = useDispatch();\n  const tileDataState = cloneDeep(\n    useSelector((state: State) => state.appState.layout.find((el) => el.data.grid.i === id)),\n  );\n\n  if (!tileDataState) {\n    throw new Error('No tile found under provided ID');\n  }\n\n  const [inputsData, setInputsData] = useState<EditTileInputsData>({\n    id,\n    content: tileDataState.data.content,\n    styles: tileDataState.data.styles,\n  });\n\n  // Clearly not DRY, but I'm not sure how to let typescript make me dry these funcs out\n  const onContentInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setInputsData((prevState) => {\n      const name = evt.target.name as EditContentInputName;\n      const value = evt.target.value;\n      const newState = cloneDeep(prevState);\n\n      newState.content[name] = value;\n\n      return newState;\n    });\n  };\n\n  const onStylesInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setInputsData((prevState) => {\n      const name = evt.target.name as EditStyleInputName;\n      const value = evt.target.value;\n      const newState = cloneDeep(prevState);\n\n      newState.styles[name] = value;\n\n      return newState;\n    });\n  };\n\n  const onSubmit = (evt: React.FormEvent) => {\n    evt.preventDefault();\n    dispatch(setLayoutItemData(inputsData));\n    dispatch(unsetOverlay());\n  };\n\n  return (\n    <form className=\"overlay__overlay-form overlay-form\" onSubmit={onSubmit} onClick={(evt) => evt.stopPropagation()}>\n      <div className=\"overlay-form__tile-preview\"></div>\n      <div className=\"overlay-form__edit\">\n        <input type=\"hidden\" value={id} />\n        {/* Conditional set of form inputs goes here */}\n        <fieldset className=\"overlay-form__fieldset\">\n          {getTileFormLayout(type, inputsData, onContentInputChange)}\n        </fieldset>\n        {/* Conditional set of form inputs ends here */}\n        <fieldset className=\"overlay-form__fieldset overlay-form__fieldset--grid-horizontal\">\n          <div className=\"overlay-form__group\">\n            <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-backgroundColor\">\n              Background color:\n            </label>\n            <div\n              className=\"overlay-form__color-display\"\n              style={{\n                backgroundColor: inputsData.styles.backgroundColor,\n                boxShadow: `0 0 10px 0 ${inputsData.styles.backgroundColor}`,\n              }}\n            >\n              <input\n                className=\"overlay-form__input overlay-form__input--color\"\n                name=\"backgroundColor\"\n                type=\"color\"\n                id=\"overlay-edit-backgroundColor\"\n                value={inputsData.styles.backgroundColor || ''}\n                onChange={onStylesInputChange}\n              />\n            </div>\n          </div>\n          <div className=\"overlay-form__group\">\n            <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-color\">\n              Font color:\n            </label>\n            <div\n              className=\"overlay-form__color-display\"\n              style={{\n                backgroundColor: inputsData.styles.color,\n                boxShadow: `0 0 10px 0 ${inputsData.styles.color}`,\n              }}\n            >\n              <input\n                className=\"overlay-form__input overlay-form__input--color\"\n                name=\"color\"\n                type=\"color\"\n                id=\"overlay-edit-color\"\n                value={inputsData.styles.color || ''}\n                onChange={onStylesInputChange}\n              />\n            </div>\n          </div>\n        </fieldset>\n        <button className=\"overlay__submit\" type=\"submit\">\n          Save\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditTileForm;\n","import React from 'react';\n\nconst SettingsForm = () => {\n  return (\n    <>\n      <div className=\"overlay-form__group\">\n        <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-url\">\n          URL:\n        </label>\n        <input\n          className=\"overlay-form__input overlay-form__input--text\"\n          name=\"url\"\n          type=\"text\"\n          id=\"overlay-edit-url\"\n          value={url || ''}\n        />\n      </div>\n      <div className=\"overlay-form__group\">\n        <label className=\"overlay-form__label\" htmlFor=\"overlay-edit-title\">\n          Link title:\n        </label>\n        <input\n          className=\"overlay-form__input overlay-form__input--text\"\n          name=\"title\"\n          type=\"text\"\n          id=\"overlay-edit-title\"\n          value={title || ''}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SettingsForm;\n","import React from 'react';\n\nimport { OverlayType, OverlayData } from '../../../store/states/ui/slices/overlay/types';\nimport EditTileForm from './EditTileForm/EditTileForm';\nimport SettingsForm from './SettingsForm/SettingsForm';\n\nconst OverlayContent: React.FC<{ type: OverlayType; data: OverlayData }> = ({ type, data }) => {\n  if (type === 'edit' && !data) {\n    throw new Error('One of the props provided to OverlayContent Component is empty.');\n  }\n  switch (type) {\n    case 'edit':\n      return <EditTileForm {...data!} />;\n    case 'settings':\n      return <SettingsForm />;\n    default:\n      throw new Error('Invalid overlay type recieved while mapping types to Components');\n  }\n};\n\nexport default OverlayContent;\n","import React from 'react';\nimport { OverlayProps } from './types';\nimport { useDispatch } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { unsetOverlay } from '../../store/states/ui/slices/overlay/overlay';\nimport OverlayContent from './OverlayContent/OverlayContent';\nimport './Overlay.scss';\n\nconst Overlay: React.FC<OverlayProps> = ({ type, data, isActive }) => {\n  const dispatch = useDispatch();\n\n  // TODO: refactor so that it works without unmountOnExit\n  return (\n    <CSSTransition\n      in={isActive}\n      timeout={300}\n      classNames={{\n        // TODO: this is BS, fix it\n        enterActive: 'overlay--active',\n        enterDone: 'overlay--active',\n        exit: 'overlay--disappearing',\n      }}\n      unmountOnExit\n    >\n      <div role=\"button\" className=\"overlay\" onClick={() => dispatch(unsetOverlay())}>\n        <OverlayContent type={type} data={data} />\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default Overlay;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { State } from './app/store/states/types';\nimport Capybara from './app/components/Capybara/Capybara';\nimport Overlay from './app/components/Overlay/Overlay';\nimport { Overlay as OverlayState } from './app/store/states/ui/slices/overlay/types';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  // Overlay state\n  const { type, data, isActive }: OverlayState = useSelector((state: State) => state.ui.overlay);\n\n  return (\n    <div className=\"App\">\n      <Capybara isOverlayed={isActive} />\n      <Overlay type={type} data={data} isActive={isActive} />\n    </div>\n  );\n};\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RoundingValue, Styles } from './types';\n\nconst initialState: Styles = { rounding: 0 };\n\nexport const stylesSlice = createSlice({\n  name: 'styles',\n  initialState,\n  reducers: {\n    setRounding: (state, action: PayloadAction<RoundingValue>) => {\n      state.rounding = action.payload;\n    },\n  },\n});\n\nexport const {} = stylesSlice.actions;\n\nexport default stylesSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport styles from './slices/styles/styles';\nimport overlay from './slices/overlay/overlay';\n\nexport default combineReducers({\n  styles,\n  overlay,\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Authorisation as AuthState } from './types';\n\nconst initialState: AuthState = { username: null };\n\nexport const authStateSlice = createSlice({\n  name: 'authorisation',\n  initialState,\n  reducers: {\n    unauthorise: () => initialState,\n    authorise: (state, action: PayloadAction<string>) => ({ username: action.payload }),\n  },\n});\n\nexport const { authorise, unauthorise } = authStateSlice.actions;\n\nexport default authStateSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport authorisation from './slices/auth/auth';\n\nconst domainDataReducer = combineReducers({ authorisation });\n\nexport default domainDataReducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport layout from './slices/layout/layout';\n\nconst appStateReducer = combineReducers({ layout });\n\nexport default appStateReducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport uiReducer from './ui/uiReducer';\nimport domainDataReducer from './domainData/domainDataReducer';\nimport appStateReducer from './appState/appStateReducer';\n\nconst reducer = combineReducers({\n  domainData: domainDataReducer,\n  appState: appStateReducer,\n  ui: uiReducer,\n});\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport reducer from './states/rootReducer';\n\nconst store = configureStore({ reducer });\n\nlet lastLayout = store.getState().appState.layout;\n\n// Updates layout in local storage on every layout change in the state\nif (window.localStorage) {\n  store.subscribe(() => {\n    const newLayout = store.getState().appState.layout;\n    if (newLayout !== lastLayout) {\n      lastLayout = newLayout;\n      window.localStorage.setItem('layout', JSON.stringify(newLayout));\n    }\n  });\n}\n\nexport default store;\n","// This optional code is used to register a service worker\n// register() is not called by default\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport store from './app/store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}